{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/FormButton/FormButton.tsx","redux/contacts/contacts-slice.ts","components/ContactForm/ContactForm.tsx","components/ContactList/ContactList.tsx","components/Filter/Filter.tsx","App.tsx","redux/store.ts","index.tsx","components/ContactList/ContactList.module.css","components/FormButton/FormButton.module.css","components/Filter/Filter.module.css"],"names":["module","exports","FormButton","type","onClick","disabled","children","allProps","className","s","button","contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","getContacts","query","filterStr","providesTags","deleteContact","mutation","id","url","method","invalidatesTags","createContact","newContact","body","useGetContactsQuery","useDeleteContactMutation","useCreateContactMutation","ContactForm","contacts","addContactToPhonebook","name","phone","toLowerCase","filter","contact","includes","length","isInContacts","alert","initialValues","validationSchema","Yup","required","matches","onSubmit","values","resetForm","form","label","fieldInput","placeholder","component","validatorError","ContactList","onDelete","list","map","item","itemName","itemPhone","size","Filter","filterContacts","useState","filterValue","setFilterValue","useEffect","value","onChange","e","target","App","setFilter","data","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75b2d300.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__xxriG\",\"label\":\"ContactForm_label__1JWak\",\"fieldInput\":\"ContactForm_fieldInput__25OJ2\",\"validatorError\":\"ContactForm_validatorError__cXPbp\"};","import React, { FC } from 'react';\r\nimport s from './FormButton.module.css';\r\nimport { IButton } from '../../interfaces/IButton';\r\n\r\ninterface Props {\r\n   type?: string,\r\n  onClick?: () => void,\r\n  disabled?: boolean,\r\n  children?: any\r\n}\r\n\r\nconst FormButton: FC<Props> = ({\r\n  type = 'button',\r\n  onClick,\r\n  disabled = false,\r\n  children,\r\n  ...allProps\r\n}: IButton) => {\r\n  return (\r\n    <button\r\n      type={type}\r\n      className={s.button}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      {...allProps}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default FormButton;\r\n\r\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n\r\nexport const contactsApi = createApi({\r\n  reducerPath: 'contactsApi',\r\n    baseQuery: fetchBaseQuery({ baseUrl: 'https://61ac9aa5d228a9001703ab59.mockapi.io' }),\r\n  tagTypes: ['Contact'],\r\n  endpoints: (builder) => ({\r\n    getContacts: builder.query({\r\n        query: (filterStr) => `contacts?sortBy=name&name=${filterStr}`,\r\n        providesTags: ['Contact']\r\n    }),\r\n      deleteContact: builder.mutation({\r\n          query: (id) => ({\r\n              url: `/contacts/${id}`,\r\n              method: \"DELETE\",\r\n          }),\r\n          invalidatesTags: ['Contact']\r\n      }),\r\n      createContact: builder.mutation({\r\n          query: (newContact) => ({\r\n              url: '/contacts',\r\n              method: 'POST',\r\n              body: newContact\r\n          }),\r\n          invalidatesTags: ['Contact']\r\n      })\r\n  }),\r\n})\r\n\r\nexport const { useGetContactsQuery, useDeleteContactMutation, useCreateContactMutation } = contactsApi;","import * as Yup from 'yup';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport FormButton from '../FormButton/FormButton';\r\nimport s from './ContactForm.module.css';\r\nimport { useCreateContactMutation } from 'redux/contacts/contacts-slice';\r\nimport IContacts from 'interfaces/IContacts'\r\nimport IContact from 'interfaces/IContact'\r\n\r\n\r\nexport default function ContactForm({contacts}: IContacts) {\r\n  const [createContact] = useCreateContactMutation();\r\n\r\n  const isInContacts = (name: string) => {\r\n    name = name.toLowerCase();\r\n    return (\r\n      contacts.filter((contact: IContact) => contact.name.toLowerCase().includes(name))\r\n        .length > 0\r\n    );\r\n  };\r\n\r\n  const addContactToPhonebook = ({ name, phone }: {name: string, phone: string}) => {\r\n    if (isInContacts(name)) {\r\n      alert(`${name} is already in contacts`);\r\n      return;\r\n    }\r\n    const contact = {name, phone}\r\n\r\n    createContact(contact);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={{ name: '', phone: '' }}\r\n        validationSchema={Yup.object({\r\n          name: Yup.string()\r\n            .required()\r\n            .matches(\r\n              /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\r\n              \"Name can contain only letters, ', - and space.\",\r\n            ),\r\n          phone: Yup.string()\r\n            .required()\r\n            .matches(\r\n              /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\r\n              'Phone number should contain only numbers and it also could contain spaces, dash, parenthesis and starts with +',\r\n            ),\r\n        })}\r\n        onSubmit={(values, { resetForm }) => {\r\n          addContactToPhonebook(values);\r\n          resetForm();\r\n        }}\r\n      >\r\n        <Form className={s.form}>\r\n          <label className={s.label}>\r\n            Name:\r\n            <Field\r\n              className={s.fieldInput}\r\n              name=\"name\"\r\n              type=\"text\"\r\n              placeholder=\"enter your name\"\r\n            />\r\n            <ErrorMessage\r\n              name=\"name\"\r\n              component=\"span\"\r\n              className={s.validatorError}\r\n            />\r\n          </label>\r\n          <label className={s.label}>\r\n            Phone number:\r\n            <Field\r\n              className={s.fieldInput}\r\n              name=\"phone\"\r\n              type=\"tel\"\r\n              placeholder=\"enter your phone number\"\r\n            />\r\n            <ErrorMessage\r\n              name=\"phone\"\r\n              component=\"span\"\r\n              className={s.validatorError}\r\n            />\r\n          </label>\r\n          <FormButton type=\"submit\">Add contact</FormButton>\r\n        </Form>\r\n      </Formik>\r\n      <hr />\r\n    </div>\r\n  );\r\n}\r\n","import FormButton from '../FormButton';\r\nimport { MdDelete } from 'react-icons/md';\r\nimport s from './ContactList.module.css';\r\nimport IContacts from 'interfaces/IContacts'\r\nimport IContact from 'interfaces/IContact';\r\n\r\ninterface IContactsList extends IContacts {\r\n  onDelete: (id: string) => void\r\n}\r\n\r\nexport default function ContactList({contacts, onDelete}: IContactsList) {\r\n\r\n  return (\r\n    <ul className={s.list}>\r\n      {contacts.map(({ id, name, phone }: IContact) => (\r\n        <li key={id} className={s.item}>\r\n          <span className={s.itemName}>{name}</span>\r\n          <span className={s.itemPhone}>{phone}</span>\r\n          <FormButton\r\n            onClick={() => onDelete(id)}\r\n            aria-label=\"Delete contact\"\r\n          >\r\n            <MdDelete size=\"18\" />\r\n          </FormButton>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import {useState, useEffect } from 'react';\r\nimport s from './Filter.module.css';\r\n\r\ninterface IFilter {\r\n  filterContacts: (query: string) => void\r\n}\r\n\r\nexport default function Filter({ filterContacts }: IFilter) {\r\n  const [filterValue, setFilterValue] = useState<string>(\"\");\r\n\r\n  useEffect(() => {\r\n    filterContacts(filterValue);\r\n  }, [filterValue, filterContacts]);\r\n\r\n  const handleChangeFilter = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFilterValue(e.target.value);\r\n  };\r\n    return (\r\n      <div>\r\n        <label>\r\n          Find contacts by name:\r\n          <input\r\n            type=\"text\"\r\n            name=\"filter\"\r\n            value={filterValue}\r\n            onChange={handleChangeFilter}\r\n            className={s.fieldInput}\r\n          />\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n\r\n","import './App.css';\r\nimport {useState} from 'react';\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactList from './components/ContactList';\r\nimport Filter from './components/Filter';\r\nimport { useDeleteContactMutation, useGetContactsQuery } from 'redux/contacts/contacts-slice';\r\n\r\nexport default function App() {\r\n  const [filter, setFilter] = useState<string>(\"\");\r\n\r\n  const { data } = useGetContactsQuery(filter);\r\n  const [deleteContact] = useDeleteContactMutation();\r\n\r\n  const filterContacts = (query: string) => {\r\n    setFilter(query);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Phonebook</h1>\r\n      <ContactForm contacts={data}/>\r\n\r\n      <h2>Contacts</h2>\r\n      <Filter filterContacts={filterContacts}/>\r\n     {data && <ContactList contacts={data} onDelete={deleteContact} />}\r\n    </div>\r\n  );\r\n}\r\n","import logger from 'redux-logger';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { contactsApi } from './contacts/contacts-slice';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware(),\r\n  logger,\r\n  contactsApi.middleware,\r\n];\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    [contactsApi.reducerPath]: contactsApi.reducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport {store} from './redux/store';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3RYRc\",\"item\":\"ContactList_item__XVqev\",\"itemName\":\"ContactList_itemName__2gQRH\",\"itemPhone\":\"ContactList_itemPhone__1JcWQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FormButton_button__2mwVK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldInput\":\"Filter_fieldInput__2ZZ-J\"};"],"sourceRoot":""}